/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as VerifyPhoneImport } from './routes/verify-phone'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as MedicalHistoryIndexImport } from './routes/medical-history/index'
import { Route as HospitalsIndexImport } from './routes/hospitals/index'
import { Route as AppointmentsIndexImport } from './routes/appointments/index'
import { Route as HospitalsHospitalIdImport } from './routes/hospitals/$hospitalId'
import { Route as AppointmentsBookImport } from './routes/appointments/book'

// Create Virtual Routes

const SettingsLazyImport = createFileRoute('/settings')()
const DashboardLazyImport = createFileRoute('/dashboard')()

// Create/Update Routes

const SettingsLazyRoute = SettingsLazyImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/settings.lazy').then((d) => d.Route))

const DashboardLazyRoute = DashboardLazyImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/dashboard.lazy').then((d) => d.Route))

const VerifyPhoneRoute = VerifyPhoneImport.update({
  id: '/verify-phone',
  path: '/verify-phone',
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const MedicalHistoryIndexRoute = MedicalHistoryIndexImport.update({
  id: '/medical-history/',
  path: '/medical-history/',
  getParentRoute: () => rootRoute,
} as any)

const HospitalsIndexRoute = HospitalsIndexImport.update({
  id: '/hospitals/',
  path: '/hospitals/',
  getParentRoute: () => rootRoute,
} as any)

const AppointmentsIndexRoute = AppointmentsIndexImport.update({
  id: '/appointments/',
  path: '/appointments/',
  getParentRoute: () => rootRoute,
} as any)

const HospitalsHospitalIdRoute = HospitalsHospitalIdImport.update({
  id: '/hospitals/$hospitalId',
  path: '/hospitals/$hospitalId',
  getParentRoute: () => rootRoute,
} as any)

const AppointmentsBookRoute = AppointmentsBookImport.update({
  id: '/appointments/book',
  path: '/appointments/book',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/verify-phone': {
      id: '/verify-phone'
      path: '/verify-phone'
      fullPath: '/verify-phone'
      preLoaderRoute: typeof VerifyPhoneImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardLazyImport
      parentRoute: typeof rootRoute
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsLazyImport
      parentRoute: typeof rootRoute
    }
    '/appointments/book': {
      id: '/appointments/book'
      path: '/appointments/book'
      fullPath: '/appointments/book'
      preLoaderRoute: typeof AppointmentsBookImport
      parentRoute: typeof rootRoute
    }
    '/hospitals/$hospitalId': {
      id: '/hospitals/$hospitalId'
      path: '/hospitals/$hospitalId'
      fullPath: '/hospitals/$hospitalId'
      preLoaderRoute: typeof HospitalsHospitalIdImport
      parentRoute: typeof rootRoute
    }
    '/appointments/': {
      id: '/appointments/'
      path: '/appointments'
      fullPath: '/appointments'
      preLoaderRoute: typeof AppointmentsIndexImport
      parentRoute: typeof rootRoute
    }
    '/hospitals/': {
      id: '/hospitals/'
      path: '/hospitals'
      fullPath: '/hospitals'
      preLoaderRoute: typeof HospitalsIndexImport
      parentRoute: typeof rootRoute
    }
    '/medical-history/': {
      id: '/medical-history/'
      path: '/medical-history'
      fullPath: '/medical-history'
      preLoaderRoute: typeof MedicalHistoryIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/verify-phone': typeof VerifyPhoneRoute
  '/dashboard': typeof DashboardLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/appointments/book': typeof AppointmentsBookRoute
  '/hospitals/$hospitalId': typeof HospitalsHospitalIdRoute
  '/appointments': typeof AppointmentsIndexRoute
  '/hospitals': typeof HospitalsIndexRoute
  '/medical-history': typeof MedicalHistoryIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/verify-phone': typeof VerifyPhoneRoute
  '/dashboard': typeof DashboardLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/appointments/book': typeof AppointmentsBookRoute
  '/hospitals/$hospitalId': typeof HospitalsHospitalIdRoute
  '/appointments': typeof AppointmentsIndexRoute
  '/hospitals': typeof HospitalsIndexRoute
  '/medical-history': typeof MedicalHistoryIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/verify-phone': typeof VerifyPhoneRoute
  '/dashboard': typeof DashboardLazyRoute
  '/settings': typeof SettingsLazyRoute
  '/appointments/book': typeof AppointmentsBookRoute
  '/hospitals/$hospitalId': typeof HospitalsHospitalIdRoute
  '/appointments/': typeof AppointmentsIndexRoute
  '/hospitals/': typeof HospitalsIndexRoute
  '/medical-history/': typeof MedicalHistoryIndexRoute
  '/users/': typeof UsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/signup'
    | '/verify-phone'
    | '/dashboard'
    | '/settings'
    | '/appointments/book'
    | '/hospitals/$hospitalId'
    | '/appointments'
    | '/hospitals'
    | '/medical-history'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/signup'
    | '/verify-phone'
    | '/dashboard'
    | '/settings'
    | '/appointments/book'
    | '/hospitals/$hospitalId'
    | '/appointments'
    | '/hospitals'
    | '/medical-history'
    | '/users'
  id:
    | '__root__'
    | '/login'
    | '/signup'
    | '/verify-phone'
    | '/dashboard'
    | '/settings'
    | '/appointments/book'
    | '/hospitals/$hospitalId'
    | '/appointments/'
    | '/hospitals/'
    | '/medical-history/'
    | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
  VerifyPhoneRoute: typeof VerifyPhoneRoute
  DashboardLazyRoute: typeof DashboardLazyRoute
  SettingsLazyRoute: typeof SettingsLazyRoute
  AppointmentsBookRoute: typeof AppointmentsBookRoute
  HospitalsHospitalIdRoute: typeof HospitalsHospitalIdRoute
  AppointmentsIndexRoute: typeof AppointmentsIndexRoute
  HospitalsIndexRoute: typeof HospitalsIndexRoute
  MedicalHistoryIndexRoute: typeof MedicalHistoryIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
  VerifyPhoneRoute: VerifyPhoneRoute,
  DashboardLazyRoute: DashboardLazyRoute,
  SettingsLazyRoute: SettingsLazyRoute,
  AppointmentsBookRoute: AppointmentsBookRoute,
  HospitalsHospitalIdRoute: HospitalsHospitalIdRoute,
  AppointmentsIndexRoute: AppointmentsIndexRoute,
  HospitalsIndexRoute: HospitalsIndexRoute,
  MedicalHistoryIndexRoute: MedicalHistoryIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/login",
        "/signup",
        "/verify-phone",
        "/dashboard",
        "/settings",
        "/appointments/book",
        "/hospitals/$hospitalId",
        "/appointments/",
        "/hospitals/",
        "/medical-history/",
        "/users/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/verify-phone": {
      "filePath": "verify-phone.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.lazy.tsx"
    },
    "/settings": {
      "filePath": "settings.lazy.tsx"
    },
    "/appointments/book": {
      "filePath": "appointments/book.tsx"
    },
    "/hospitals/$hospitalId": {
      "filePath": "hospitals/$hospitalId.tsx"
    },
    "/appointments/": {
      "filePath": "appointments/index.tsx"
    },
    "/hospitals/": {
      "filePath": "hospitals/index.tsx"
    },
    "/medical-history/": {
      "filePath": "medical-history/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
