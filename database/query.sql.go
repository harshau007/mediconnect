// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createHospital = `-- name: CreateHospital :one
INSERT INTO hospital (
    name, address, phone, email, website, visiting_hours, is_open,
    facilities, queue_length, average_waiting_time, current_waiting_time,
    is_crowded
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, name, address, phone, email, website, visiting_hours, is_open, last_inspected, facilities, queue_length, average_waiting_time, current_waiting_time, is_crowded, created_at, updated_at
`

type CreateHospitalParams struct {
	Name               string
	Address            string
	Phone              string
	Email              string
	Website            string
	VisitingHours      string
	IsOpen             sql.NullBool
	Facilities         string
	QueueLength        int64
	AverageWaitingTime int64
	CurrentWaitingTime int64
	IsCrowded          sql.NullBool
}

func (q *Queries) CreateHospital(ctx context.Context, arg CreateHospitalParams) (Hospital, error) {
	row := q.db.QueryRowContext(ctx, createHospital,
		arg.Name,
		arg.Address,
		arg.Phone,
		arg.Email,
		arg.Website,
		arg.VisitingHours,
		arg.IsOpen,
		arg.Facilities,
		arg.QueueLength,
		arg.AverageWaitingTime,
		arg.CurrentWaitingTime,
		arg.IsCrowded,
	)
	var i Hospital
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.VisitingHours,
		&i.IsOpen,
		&i.LastInspected,
		&i.Facilities,
		&i.QueueLength,
		&i.AverageWaitingTime,
		&i.CurrentWaitingTime,
		&i.IsCrowded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHospital = `-- name: DeleteHospital :exec
DELETE FROM hospital
WHERE id = ?
`

func (q *Queries) DeleteHospital(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHospital, id)
	return err
}

const getHospital = `-- name: GetHospital :one
SELECT id, name, address, phone, email, website, visiting_hours, is_open, last_inspected, facilities, queue_length, average_waiting_time, current_waiting_time, is_crowded, created_at, updated_at FROM hospital
WHERE id = ? LIMIT 1
`

func (q *Queries) GetHospital(ctx context.Context, id int64) (Hospital, error) {
	row := q.db.QueryRowContext(ctx, getHospital, id)
	var i Hospital
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.VisitingHours,
		&i.IsOpen,
		&i.LastInspected,
		&i.Facilities,
		&i.QueueLength,
		&i.AverageWaitingTime,
		&i.CurrentWaitingTime,
		&i.IsCrowded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHospitals = `-- name: ListHospitals :many
SELECT id, name, address, phone, email, website, visiting_hours, is_open, last_inspected, facilities, queue_length, average_waiting_time, current_waiting_time, is_crowded, created_at, updated_at FROM hospital
WHERE (is_open = ? OR ? IS NULL)
  AND (average_waiting_time <= ? OR ? IS NULL)
  AND (current_waiting_time <= ? OR ? IS NULL)
  AND (queue_length <= ? OR ? IS NULL)
  AND (address LIKE '%' || ? || '%' OR ? IS NULL)
ORDER BY last_inspected DESC
`

type ListHospitalsParams struct {
	IsOpen             sql.NullBool
	Column2            interface{}
	AverageWaitingTime int64
	Column4            interface{}
	CurrentWaitingTime int64
	Column6            interface{}
	QueueLength        int64
	Column8            interface{}
	Column9            sql.NullString
	Column10           interface{}
}

func (q *Queries) ListHospitals(ctx context.Context, arg ListHospitalsParams) ([]Hospital, error) {
	rows, err := q.db.QueryContext(ctx, listHospitals,
		arg.IsOpen,
		arg.Column2,
		arg.AverageWaitingTime,
		arg.Column4,
		arg.CurrentWaitingTime,
		arg.Column6,
		arg.QueueLength,
		arg.Column8,
		arg.Column9,
		arg.Column10,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hospital
	for rows.Next() {
		var i Hospital
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.Email,
			&i.Website,
			&i.VisitingHours,
			&i.IsOpen,
			&i.LastInspected,
			&i.Facilities,
			&i.QueueLength,
			&i.AverageWaitingTime,
			&i.CurrentWaitingTime,
			&i.IsCrowded,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateHospital = `-- name: UpdateHospital :one
UPDATE hospital
SET name = ?,
    address = ?,
    phone = ?,
    email = ?,
    website = ?,
    visiting_hours = ?,
    is_open = ?,
    facilities = ?,
    queue_length = ?,
    average_waiting_time = ?,
    current_waiting_time = ?,
    is_crowded = ?,
    last_inspected = ?
WHERE id = ?
RETURNING id, name, address, phone, email, website, visiting_hours, is_open, last_inspected, facilities, queue_length, average_waiting_time, current_waiting_time, is_crowded, created_at, updated_at
`

type UpdateHospitalParams struct {
	Name               string
	Address            string
	Phone              string
	Email              string
	Website            string
	VisitingHours      string
	IsOpen             sql.NullBool
	Facilities         string
	QueueLength        int64
	AverageWaitingTime int64
	CurrentWaitingTime int64
	IsCrowded          sql.NullBool
	LastInspected      sql.NullTime
	ID                 int64
}

func (q *Queries) UpdateHospital(ctx context.Context, arg UpdateHospitalParams) (Hospital, error) {
	row := q.db.QueryRowContext(ctx, updateHospital,
		arg.Name,
		arg.Address,
		arg.Phone,
		arg.Email,
		arg.Website,
		arg.VisitingHours,
		arg.IsOpen,
		arg.Facilities,
		arg.QueueLength,
		arg.AverageWaitingTime,
		arg.CurrentWaitingTime,
		arg.IsCrowded,
		arg.LastInspected,
		arg.ID,
	)
	var i Hospital
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.VisitingHours,
		&i.IsOpen,
		&i.LastInspected,
		&i.Facilities,
		&i.QueueLength,
		&i.AverageWaitingTime,
		&i.CurrentWaitingTime,
		&i.IsCrowded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateHospitalInspection = `-- name: UpdateHospitalInspection :exec
UPDATE hospital
SET last_inspected = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateHospitalInspection(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateHospitalInspection, id)
	return err
}
