// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createHospital = `-- name: CreateHospital :one
INSERT INTO hospital (
    name, address, phone, email, website, visiting_hours, is_open,
    facilities, queue_length, average_waiting_time, current_waiting_time,
    is_crowded
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, name, address, phone, email, website, visiting_hours, is_open, last_inspected, facilities, queue_length, average_waiting_time, current_waiting_time, is_crowded, created_at, updated_at
`

type CreateHospitalParams struct {
	Name               string       `json:"name"`
	Address            string       `json:"address"`
	Phone              string       `json:"phone"`
	Email              string       `json:"email"`
	Website            string       `json:"website"`
	VisitingHours      string       `json:"visitingHours"`
	IsOpen             sql.NullBool `json:"isOpen"`
	Facilities         string       `json:"facilities"`
	QueueLength        int64        `json:"queueLength"`
	AverageWaitingTime int64        `json:"averageWaitingTime"`
	CurrentWaitingTime int64        `json:"currentWaitingTime"`
	IsCrowded          sql.NullBool `json:"isCrowded"`
}

func (q *Queries) CreateHospital(ctx context.Context, arg CreateHospitalParams) (Hospital, error) {
	row := q.db.QueryRowContext(ctx, createHospital,
		arg.Name,
		arg.Address,
		arg.Phone,
		arg.Email,
		arg.Website,
		arg.VisitingHours,
		arg.IsOpen,
		arg.Facilities,
		arg.QueueLength,
		arg.AverageWaitingTime,
		arg.CurrentWaitingTime,
		arg.IsCrowded,
	)
	var i Hospital
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.VisitingHours,
		&i.IsOpen,
		&i.LastInspected,
		&i.Facilities,
		&i.QueueLength,
		&i.AverageWaitingTime,
		&i.CurrentWaitingTime,
		&i.IsCrowded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOTP = `-- name: CreateOTP :one
INSERT INTO otp (
    user_id,
    otp_number
) VALUES (
    ?, ?
)
RETURNING id, user_id, otp_number, created_at, updated_at
`

type CreateOTPParams struct {
	UserID    int64  `json:"userId"`
	OtpNumber string `json:"otpNumber"`
}

func (q *Queries) CreateOTP(ctx context.Context, arg CreateOTPParams) (Otp, error) {
	row := q.db.QueryRowContext(ctx, createOTP, arg.UserID, arg.OtpNumber)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO user (
  first_name, last_name, phone, email, is_verified, aadhar_number, password, role
) VALUES (
  ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, first_name, last_name, phone, email, is_verified, aadhar_number, password, role, created_at, updated_at
`

type CreateUserParams struct {
	FirstName    string       `json:"firstName"`
	LastName     string       `json:"lastName"`
	Phone        string       `json:"phone"`
	Email        string       `json:"email"`
	IsVerified   sql.NullBool `json:"isVerified"`
	AadharNumber string       `json:"aadharNumber"`
	Password     string       `json:"password"`
	Role         string       `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Email,
		arg.IsVerified,
		arg.AadharNumber,
		arg.Password,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.IsVerified,
		&i.AadharNumber,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteHospital = `-- name: DeleteHospital :exec
DELETE FROM hospital
WHERE id = ?
`

func (q *Queries) DeleteHospital(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteHospital, id)
	return err
}

const deleteOTP = `-- name: DeleteOTP :exec
DELETE FROM otp
WHERE id = ?
`

func (q *Queries) DeleteOTP(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOTP, id)
	return err
}

const deleteOTPByUserID = `-- name: DeleteOTPByUserID :exec
DELETE FROM otp
WHERE user_id = ?
`

func (q *Queries) DeleteOTPByUserID(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteOTPByUserID, userID)
	return err
}

const deleteUserByAadhar = `-- name: DeleteUserByAadhar :exec
DELETE FROM user
WHERE aadhar_number = ?
`

func (q *Queries) DeleteUserByAadhar(ctx context.Context, aadharNumber string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByAadhar, aadharNumber)
	return err
}

const deleteUserByEmail = `-- name: DeleteUserByEmail :exec
DELETE FROM user
WHERE email = ?
`

func (q *Queries) DeleteUserByEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByEmail, email)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM user
WHERE id = ?
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const deleteUserByPhone = `-- name: DeleteUserByPhone :exec
DELETE FROM user
WHERE phone = ?
`

func (q *Queries) DeleteUserByPhone(ctx context.Context, phone string) error {
	_, err := q.db.ExecContext(ctx, deleteUserByPhone, phone)
	return err
}

const getHospital = `-- name: GetHospital :one
SELECT id, name, address, phone, email, website, visiting_hours, is_open, last_inspected, facilities, queue_length, average_waiting_time, current_waiting_time, is_crowded, created_at, updated_at FROM hospital
WHERE id = ? LIMIT 1
`

func (q *Queries) GetHospital(ctx context.Context, id int64) (Hospital, error) {
	row := q.db.QueryRowContext(ctx, getHospital, id)
	var i Hospital
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.VisitingHours,
		&i.IsOpen,
		&i.LastInspected,
		&i.Facilities,
		&i.QueueLength,
		&i.AverageWaitingTime,
		&i.CurrentWaitingTime,
		&i.IsCrowded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOTPByID = `-- name: GetOTPByID :one
SELECT id, user_id, otp_number, created_at, updated_at FROM otp
WHERE id = ?
LIMIT 1
`

func (q *Queries) GetOTPByID(ctx context.Context, id int64) (Otp, error) {
	row := q.db.QueryRowContext(ctx, getOTPByID, id)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOTPByUserID = `-- name: GetOTPByUserID :one
SELECT id, user_id, otp_number, created_at, updated_at FROM otp
WHERE user_id = ?
LIMIT 1
`

func (q *Queries) GetOTPByUserID(ctx context.Context, userID int64) (Otp, error) {
	row := q.db.QueryRowContext(ctx, getOTPByUserID, userID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByAadhar = `-- name: GetUserByAadhar :one
SELECT id, first_name, last_name, phone, email, is_verified, aadhar_number, password, role, created_at, updated_at FROM user
WHERE aadhar_number = ? LIMIT 1
`

func (q *Queries) GetUserByAadhar(ctx context.Context, aadharNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByAadhar, aadharNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.IsVerified,
		&i.AadharNumber,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, phone, email, is_verified, aadhar_number, password, role, created_at, updated_at FROM user
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.IsVerified,
		&i.AadharNumber,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, first_name, last_name, phone, email, is_verified, aadhar_number, password, role, created_at, updated_at FROM user
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.IsVerified,
		&i.AadharNumber,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, first_name, last_name, phone, email, is_verified, aadhar_number, password, role, created_at, updated_at FROM user
WHERE phone = ? LIMIT 1
`

func (q *Queries) GetUserByPhone(ctx context.Context, phone string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phone)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.IsVerified,
		&i.AadharNumber,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listHospitals = `-- name: ListHospitals :many
SELECT id, name, address, phone, email, website, visiting_hours, is_open, last_inspected, facilities, queue_length, average_waiting_time, current_waiting_time, is_crowded, created_at, updated_at FROM hospital
WHERE (is_open = ? OR ? IS NULL)
  AND (average_waiting_time <= ? OR ? IS NULL)
  AND (current_waiting_time <= ? OR ? IS NULL)
  AND (queue_length <= ? OR ? IS NULL)
  AND (address LIKE '%' || ? || '%' OR ? IS NULL)
ORDER BY last_inspected DESC
`

type ListHospitalsParams struct {
	IsOpen             sql.NullBool   `json:"isOpen"`
	Column2            interface{}    `json:"column2"`
	AverageWaitingTime int64          `json:"averageWaitingTime"`
	Column4            interface{}    `json:"column4"`
	CurrentWaitingTime int64          `json:"currentWaitingTime"`
	Column6            interface{}    `json:"column6"`
	QueueLength        int64          `json:"queueLength"`
	Column8            interface{}    `json:"column8"`
	Column9            sql.NullString `json:"column9"`
	Column10           interface{}    `json:"column10"`
}

func (q *Queries) ListHospitals(ctx context.Context, arg ListHospitalsParams) ([]Hospital, error) {
	rows, err := q.db.QueryContext(ctx, listHospitals,
		arg.IsOpen,
		arg.Column2,
		arg.AverageWaitingTime,
		arg.Column4,
		arg.CurrentWaitingTime,
		arg.Column6,
		arg.QueueLength,
		arg.Column8,
		arg.Column9,
		arg.Column10,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Hospital
	for rows.Next() {
		var i Hospital
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.Phone,
			&i.Email,
			&i.Website,
			&i.VisitingHours,
			&i.IsOpen,
			&i.LastInspected,
			&i.Facilities,
			&i.QueueLength,
			&i.AverageWaitingTime,
			&i.CurrentWaitingTime,
			&i.IsCrowded,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOTPs = `-- name: ListOTPs :many
SELECT id, user_id, otp_number, created_at, updated_at FROM otp
ORDER BY created_at DESC
`

func (q *Queries) ListOTPs(ctx context.Context) ([]Otp, error) {
	rows, err := q.db.QueryContext(ctx, listOTPs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Otp
	for rows.Next() {
		var i Otp
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.OtpNumber,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, phone, email, is_verified, aadhar_number, password, role, created_at, updated_at FROM user
WHERE 
  (is_verified = ? OR ? = FALSE) AND
  (role = ? OR ? = FALSE)
ORDER BY updated_at DESC
`

type ListUsersParams struct {
	IsVerified sql.NullBool `json:"isVerified"`
	Column2    interface{}  `json:"column2"`
	Role       string       `json:"role"`
	Column4    interface{}  `json:"column4"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers,
		arg.IsVerified,
		arg.Column2,
		arg.Role,
		arg.Column4,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
			&i.Email,
			&i.IsVerified,
			&i.AadharNumber,
			&i.Password,
			&i.Role,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmailVerified = `-- name: UpdateEmailVerified :one
UPDATE user
SET 
  is_verified = ?, 
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, first_name, last_name, phone, email, is_verified, aadhar_number, password, role, created_at, updated_at
`

type UpdateEmailVerifiedParams struct {
	IsVerified sql.NullBool `json:"isVerified"`
	ID         int64        `json:"id"`
}

func (q *Queries) UpdateEmailVerified(ctx context.Context, arg UpdateEmailVerifiedParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateEmailVerified, arg.IsVerified, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.IsVerified,
		&i.AadharNumber,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateHospital = `-- name: UpdateHospital :one
UPDATE hospital
SET name = ?,
    address = ?,
    phone = ?,
    email = ?,
    website = ?,
    visiting_hours = ?,
    is_open = ?,
    facilities = ?,
    queue_length = ?,
    average_waiting_time = ?,
    current_waiting_time = ?,
    is_crowded = ?,
    last_inspected = ?
WHERE id = ?
RETURNING id, name, address, phone, email, website, visiting_hours, is_open, last_inspected, facilities, queue_length, average_waiting_time, current_waiting_time, is_crowded, created_at, updated_at
`

type UpdateHospitalParams struct {
	Name               string       `json:"name"`
	Address            string       `json:"address"`
	Phone              string       `json:"phone"`
	Email              string       `json:"email"`
	Website            string       `json:"website"`
	VisitingHours      string       `json:"visitingHours"`
	IsOpen             sql.NullBool `json:"isOpen"`
	Facilities         string       `json:"facilities"`
	QueueLength        int64        `json:"queueLength"`
	AverageWaitingTime int64        `json:"averageWaitingTime"`
	CurrentWaitingTime int64        `json:"currentWaitingTime"`
	IsCrowded          sql.NullBool `json:"isCrowded"`
	LastInspected      sql.NullTime `json:"lastInspected"`
	ID                 int64        `json:"id"`
}

func (q *Queries) UpdateHospital(ctx context.Context, arg UpdateHospitalParams) (Hospital, error) {
	row := q.db.QueryRowContext(ctx, updateHospital,
		arg.Name,
		arg.Address,
		arg.Phone,
		arg.Email,
		arg.Website,
		arg.VisitingHours,
		arg.IsOpen,
		arg.Facilities,
		arg.QueueLength,
		arg.AverageWaitingTime,
		arg.CurrentWaitingTime,
		arg.IsCrowded,
		arg.LastInspected,
		arg.ID,
	)
	var i Hospital
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.Website,
		&i.VisitingHours,
		&i.IsOpen,
		&i.LastInspected,
		&i.Facilities,
		&i.QueueLength,
		&i.AverageWaitingTime,
		&i.CurrentWaitingTime,
		&i.IsCrowded,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateHospitalInspection = `-- name: UpdateHospitalInspection :exec
UPDATE hospital
SET last_inspected = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) UpdateHospitalInspection(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, updateHospitalInspection, id)
	return err
}

const updateOTP = `-- name: UpdateOTP :one
UPDATE otp
SET
    otp_number = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, user_id, otp_number, created_at, updated_at
`

type UpdateOTPParams struct {
	OtpNumber string `json:"otpNumber"`
	ID        int64  `json:"id"`
}

func (q *Queries) UpdateOTP(ctx context.Context, arg UpdateOTPParams) (Otp, error) {
	row := q.db.QueryRowContext(ctx, updateOTP, arg.OtpNumber, arg.ID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OtpNumber,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE user
SET 
  first_name = ?,
  last_name = ?,
  phone = ?,
  email = ?,
  is_verified = ?, 
  aadhar_number = ?, 
  password = ?, 
  role = ?, 
  updated_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, first_name, last_name, phone, email, is_verified, aadhar_number, password, role, created_at, updated_at
`

type UpdateUserParams struct {
	FirstName    string       `json:"firstName"`
	LastName     string       `json:"lastName"`
	Phone        string       `json:"phone"`
	Email        string       `json:"email"`
	IsVerified   sql.NullBool `json:"isVerified"`
	AadharNumber string       `json:"aadharNumber"`
	Password     string       `json:"password"`
	Role         string       `json:"role"`
	ID           int64        `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
		arg.Email,
		arg.IsVerified,
		arg.AadharNumber,
		arg.Password,
		arg.Role,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Email,
		&i.IsVerified,
		&i.AadharNumber,
		&i.Password,
		&i.Role,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const verifyUserEmail = `-- name: VerifyUserEmail :exec
UPDATE user
SET is_email_verified = TRUE, 
    updated_at = CURRENT_TIMESTAMP
WHERE email = ?
`

func (q *Queries) VerifyUserEmail(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, verifyUserEmail, email)
	return err
}
